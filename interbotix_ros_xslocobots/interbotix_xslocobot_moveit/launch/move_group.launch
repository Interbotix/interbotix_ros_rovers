<launch>

  <!-- GDB Debug Option -->
  <arg name="debug" default="false" />
  <arg unless="$(arg debug)" name="launch_prefix" value="" />
  <arg     if="$(arg debug)" name="launch_prefix"
	   value="gdb -x $(find interbotix_xslocobot_moveit)/launch/gdb_settings.gdb --ex run --args" />

  <!-- Verbose Mode Option -->
  <arg name="info" default="$(arg debug)" />
  <arg unless="$(arg info)" name="command_args" value="" />
  <arg     if="$(arg info)" name="command_args" value="--debug" />

  <!-- move_group settings -->
  <arg name="allow_trajectory_execution" default="true"/>
  <arg name="fake_execution" default="false"/>
  <arg name="max_safe_path_cost" default="1"/>
  <arg name="jiggle_fraction" default="0.05" />
  <arg name="publish_monitored_planning_scene" default="true"/>

  <arg name="capabilities" default=""/>
  <arg name="disable_capabilities" default=""/>
  <arg name="robot_model"  default=""/>
  <arg name="robot_name" default=""/>
  <arg name="show_lidar" default=""/>
  <arg name="external_srdf_loc" default=""/>
  <arg name="dof" default=""/>
  <arg name="use_camera" default=""/>
  <arg name="pipeline" default="ompl" />



  <include file="$(find interbotix_xslocobot_moveit)/launch/planning_context.launch">
    <arg name="robot_model"        value="$(arg robot_model)"/>
    <arg name="robot_name"         value="$(arg robot_name)"/>
    <arg name="show_lidar"         value="$(arg show_lidar)"/>
    <arg name="external_srdf_loc"  value="$(arg external_srdf_loc)"/>
    <arg name="dof"                value="$(arg dof)"/>
  </include>

  <!-- load these non-default MoveGroup capabilities (space seperated) -->
  <!--
  <arg name="capabilities" value="
                a_package/AwsomeMotionPlanningCapability
                another_package/GraspPlanningPipeline
                " />
  -->

  <!-- inhibit these default MoveGroup capabilities (space seperated) -->
  <!--
  <arg name="disable_capabilities" value="
                move_group/MoveGroupKinematicsService
                move_group/ClearOctomapService
                " />
  -->

    <!-- Planning Functionality -->
    
  <!-- Planning Pipelines -->
  <!-- <group ns="move_group"> -->

    <!-- OMPL -->
    <include ns="move_group/planning_pipelines" file="$(find interbotix_xslocobot_moveit)/launch/planning_pipeline.launch.xml">
      <arg name="pipeline" value="ompl" />
    </include>

    <!-- CHOMP -->
    <!-- <include file="$(dirname)/planning_pipeline.launch.xml">
      <arg name="pipeline" value="chomp" />
    </include> -->

    <!-- Pilz Industrial Motion -->
    <!-- <include file="$(dirname)/planning_pipeline.launch.xml">
      <arg name="pipeline" value="pilz_industrial_motion_planner" />
    </include> -->

    <!-- Support custom planning pipeline -->
    <!-- <include if="$(eval arg('pipeline') not in ['ompl', 'chomp', 'pilz_industrial_motion_planner'])"
             file="$(dirname)/planning_pipeline.launch.xml">
      <arg name="pipeline" value="$(arg pipeline)" />
    </include> -->
  <!-- </group> -->
    <!-- <include ns="move_group/planning_pipelines" file="$(find interbotix_xslocobot_moveit)/launch/planning_pipeline.launch.xml">
      <arg name="pipeline" value="ompl" />
    </include> -->

    <!-- Trajectory Execution Functionality -->
    <include ns="move_group" file="$(find interbotix_xslocobot_moveit)/launch/trajectory_execution.launch.xml" if="$(arg allow_trajectory_execution)">
      <arg name="fake_execution" value="$(arg fake_execution)"/>
      <arg name="dof" value="$(arg dof)"/>
    </include>

    <!-- Sensors Functionality -->
    <include ns="move_group" file="$(find interbotix_xslocobot_moveit)/launch/sensor_manager.launch.xml" if="$(arg allow_trajectory_execution)">
      <arg name="robot_model" value="$(arg robot_model)"/>
      <arg name="robot_name"  value="$(arg robot_name)"/>
      <arg name="use_camera"  value="$(arg use_camera)"/>
    </include>

    <!-- Start the actual move_group node/action server -->
    <node name="move_group" launch-prefix="$(arg launch_prefix)" pkg="moveit_ros_move_group" type="move_group" respawn="false" output="screen" args="$(arg command_args)">
      <!-- Set the display variable, in case OpenGL code is used internally -->
      <env name="DISPLAY" value="$(optenv DISPLAY :0)" />

      <param name="allow_trajectory_execution" value="$(arg allow_trajectory_execution)"/>
      <param name="sense_for_plan/max_safe_path_cost" value="$(arg max_safe_path_cost)"/>
        <param name="default_planning_pipeline" value="$(arg pipeline)" />
      <param name="jiggle_fraction" value="$(arg jiggle_fraction)" />
      <param name="capabilities" value="$(arg capabilities)"/>
      <param name="disable_capabilities" value="$(arg disable_capabilities)"/>


      <!-- Publish the planning scene of the physical robot so that rviz plugin can know actual robot -->
      <param name="planning_scene_monitor/publish_planning_scene" value="$(arg publish_monitored_planning_scene)" />
      <param name="planning_scene_monitor/publish_geometry_updates" value="$(arg publish_monitored_planning_scene)" />
      <param name="planning_scene_monitor/publish_state_updates" value="$(arg publish_monitored_planning_scene)" />
      <param name="planning_scene_monitor/publish_transforms_updates" value="$(arg publish_monitored_planning_scene)" />
    </node>

</launch>
